Fonctions autorisées dans minishell :

- kill |options] <pid> [...]
	>> envoie un signal à un process ; par défaut signal = TERM mais on peut changer avec -s
	Signaux utiles :  HUP, INT, KILL, STOP, CONT, 0
	Signaux alternatifs : -9, -SIGKILL, -KILL
- stat [option]... file...
	>> donne le statut d'un fichier ou système de fichiers

#include <stdlib.h>
	- void *malloc(size_t size);
	- void free(void *ptr);
	- void exit(int status);
		>> cause normal process termination

#include <unistd.h>
	- ssize_t write(int fd, const void *buf, size_t count);
	- ssize_t read(int fd, void *buf, size_t count);
	- int close(int fd);
	- char *getcwd(char *buf, size_t size);
		>> return le chemin absolu du working directory du processus appelant ; 
		size = taille du chemin (en octets)
	- int chdir(const char *path);
		>> change le working directory du processus appelant
	- int execve(const char *filename, char *const argv[], char *const envp[]);
		>> exécute le programme pointé par filename (exécutable binaire ou script
		commençant par "#! interpreter") avec les arguments et l'environnement donnés
	- int dup(int oldfd);
		>> duplique le fd oldfd en utilisant le + bas dispo
		/!\ les 2 fd partagent leur offset et leurs permissions (flags)
	- int dup2(int oldfd, int newfd);
		>> idem dup mais permet de spécifier quel newfd utiliser.
		/!\ si oldfd est invalide, newfd reste ouvert
	- int pipe(int pipefd[2]);
		>> crée un pipe = mécanisme de communication inter-processus sous la forme d'une 
		série de données, octets ou bits. Le int *pipefd sert à return les références à :
		READ end of the pipe = pipefd[0]
		WRITE end of the pipe = pipefd[1]

#include <sys/types.h>
	#include <unistd.h>
		- pid_t fork(void);
			>> crée un child process : copie l'espace mémoire du process parent dans un espace
			mémoire différent
			Return : PID du child process >0 (et return 0 dans le child) (-1 si échec)
		#include <sys/stat.h>
			- int stat(const char *pathname, struct stat *statbuf);
				>> donne des infos sur le fichier situé à pathname par le biais de la structure statbuf
			- int fstat(int fd, struct stat *statbuf);
				>> donne des infos sur le fichier au fd correspondant par le biais de la structure statbuf
			- int lstat(const char *pathname, struct stat *statbuf);
				>> idem stat mais comportement différent pour les liens symboliques
	#include <sys/wait.h>
			>> attendre un changement de statut dans un child process (process terminé, stoppé
			par un signal, ou redémarré par un signal)
			WAIT est nécessaire pour libérer la mémoire après qu'un child process ait terminé
		- pid_t wait(int *wstatus);
			>> suspend l'exécution du process jusqu'a ce qu'un des enfants termine.
		- pid_t waitpid(pid_t pid, int *wstatus, int options);
			>> suspend l'exécution du process jusqu'à ce que le child process au pid correspondant
			change de statut. Par défaut, attend terminé mais on peut modifier le statut attendu
			avec les options. WAITPID change de comportement en fct du pid donné :
			-x	attendre n'importe quel child dont le process group ID = |x|
			-1	attendre n'importe quel child
			0	attendre n'importe quel child dont le process group ID = celui du process appelant
			x	attendre le child dont le process ID = x
		- int waitid(idtype_t idtype, id_t id, siginfo_t *infop, int options);
			>> permet de contrôller plus précisément quel(s) changement(s) de statut(s) attendre
			de la part de quel(s) process
		#include <sys/resource.h>
		#include <sys/time.h>
				>> similaire à WAITPID mais return en + des infos par le biais de la structure
			- pid_t wait3(int *wstatus, int options, struct rusage *rusage);
			- pid_t wait4(pid_t pid, int *wstatus, int options, struct rusage *rusage);
	#include <sys/stat.h>
	#include <fcntl.h>
		- int open(const char *pathname, int flags);
	#include <dirent.h>
		- DIR *opendir(const char *name);
			>> return un pointeur vers le premier élément du répertoire name
		- struct dirent *readdir(DIR *dirp);
			>> return un pointeur sur struct représentant l'élément suivant dans le répertoire dirp
			ou NULL quand le directory stream est terminé ou en cas d'erreur (check errno pour savoir
			dans quel cas on est)
		- int closedir(DIR *dirp);
			>> ferme le directory stream et le fd associés à dirp 

#include <signal.h>
	typedef void (*sighandler_t)(int);
	- sighandler_t signal(int signum, sighandler_t handler);
		>> sets the disposition of the signal signum to handler
		Si la disposition est set à : (= handler)
		SIG_IGN : le signal est ignoré
		SIG_DFL : l'action par défaut associée au signal se produit
		Si ptr sur fct : la fct est appelée avec signum comme argument
		Return : la valeur précédente du signal handler, ou SIG_ERR

#include <string.h>
	- char *strerror(int errnum);
		>> return la string associée à l'erreur errnum

#include <errno.h>
	>> le header définit la variable errno (int) qui contient le numéro de la dernière erreur.
	ERRNO est affecté par les appels système et certaines fonctions issues de bibliothèques, mais aucun
	d'eux ne peut le mettre à zéro

Fonctions à imiter :

- echo (-n) >> affiche une ligne de texte (sans le \n si -n)
- pwd >> affiche le nom du répertoire courant
- export >> définit l'attribut export pour des variables du shell
- unset >> annuler la variable ou fonction du shell donnéee (d'abord la variable et si échec essaie la fct)
- env >> run un programme dans un environnement modifié

