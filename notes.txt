is_builtin :
rajouter comme condition que strlen = x
si exit, free cmd et env

A IMPLEMENTER :
OK	Prompt
	Lancer un executable
		en passant pas la variable d'env PATH
		en passant un path absolu
	Builtins :
OK		echo (-n)
OK		cd
OK		pwd
OK		export
OK		unset
OK		env
OK		exit
OK	Prendre plusieurs commandes avec ;
	Différencier ' / "
	Redirections < > >>
	Pipes |
OK	Gérer les variables d'env $VARIABLE
OK	$?
	Interruptions :
		ctrl+C  SIGINT
		ctrl+D  EOF
		ctrl+\  SIGQUIT
		
ctrl+C  
envoie le signal SIGINT >> interrompt la ligne en court sans l'executer
ctrl+D  
envoie un EOF sur l'entree standard que bash interprète comme une instruction de sortie
signifie au shell qu'on a fini de taper des commandes 
(terminal affiche "process completed" et freeze, iTerm quitte)
ctrl+\  
envoie le signal SIGQUIT >> quitte le programme

$?
Contient la valeur de retour de la dernière commande executée
Quand un processus appelle exit(), le kernel stocke la valeur passée a l'appel système 
(exit status, =int)
Si c'est un child process qui appelle exit, on peut recuperer l'exit status du child depuis
le parent en utilisant wait

typedef struct	s_data
{
	t_list		*env;		->liste chainée contenant tous les elements de l'environnement
	char		**multi;	->split de la ligne de commande selon ';'
	char		*line;		->ligne de commande tapée par l'utilisateur
	char		**cmd;		->split de la ligne de commande selon les espaces
	int			status;		->valeur retour de exec_cmd
	int			fd;			->fd sur lequel écrire
}				t_data;

/bin/
Contient les commandes de base sous la forme d'executables binaires 